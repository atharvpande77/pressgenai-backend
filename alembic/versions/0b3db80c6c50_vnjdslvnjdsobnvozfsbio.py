"""vnjdslvnjdSObnvozfsbio

Revision ID: 0b3db80c6c50
Revises: 2470e292bfe2
Create Date: 2025-09-11 19:16:05.986268

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0b3db80c6c50'
down_revision: Union[str, Sequence[str], None] = '2470e292bfe2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("""
        DO $$ 
        BEGIN
            IF NOT EXISTS (
                SELECT 1 FROM pg_enum 
                WHERE enumtypid = 'story_status'::regtype 
                AND enumlabel = 'generated'
            ) THEN
                ALTER TYPE story_status ADD VALUE 'generated';
            END IF;
            
            IF NOT EXISTS (
                SELECT 1 FROM pg_enum 
                WHERE enumtypid = 'story_status'::regtype 
                AND enumlabel = 'submitted'
            ) THEN
                ALTER TYPE story_status ADD VALUE 'submitted';
            END IF;
        END $$;
    """)
    
    # Check and add missing values to publish_status enum
    op.execute("""
        DO $$ 
        BEGIN
            IF NOT EXISTS (
                SELECT 1 FROM pg_enum 
                WHERE enumtypid = 'publish_status'::regtype 
                AND enumlabel = 'pending'
            ) THEN
                ALTER TYPE publish_status ADD VALUE 'pending';
            END IF;
            
            IF NOT EXISTS (
                SELECT 1 FROM pg_enum 
                WHERE enumtypid = 'publish_status'::regtype 
                AND enumlabel = 'published'
            ) THEN
                ALTER TYPE publish_status ADD VALUE 'published';
            END IF;
            
            IF NOT EXISTS (
                SELECT 1 FROM pg_enum 
                WHERE enumtypid = 'publish_status'::regtype 
                AND enumlabel = 'rejected'
            ) THEN
                ALTER TYPE publish_status ADD VALUE 'rejected';
            END IF;
        END $$;
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("""
        DO $$ 
        BEGIN
            -- Remove values that shouldn't be in the old version
            -- Since we can't directly remove, we'll create a new type
            
            -- Create temporary types with only the old values
            IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'story_status_old') THEN
                CREATE TYPE story_status_old AS ENUM ('collecting');
            END IF;
            
            IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'publish_status_old') THEN
                CREATE TYPE publish_status_old AS ENUM ('draft', 'generated');
            END IF;
        END $$;
    """)
    
    # Convert columns to temporary types
    op.alter_column('user_stories', 'status',
                   type_=sa.Enum('collecting', name='story_status_old'),
                   postgresql_using='''
                   CASE status::text
                       WHEN 'collecting' THEN 'collecting'::story_status_old
                       ELSE 'collecting'::story_status_old
                   END
                   ''')
    
    op.alter_column('user_stories', 'publish_status',
                   type_=sa.Enum('draft', 'generated', name='publish_status_old'),
                   postgresql_using='''
                   CASE publish_status::text
                       WHEN 'draft' THEN 'draft'::publish_status_old
                       WHEN 'generated' THEN 'generated'::publish_status_old
                       ELSE 'draft'::publish_status_old
                   END
                   ''')
    
    # Drop the current enum types
    op.execute("DROP TYPE IF EXISTS story_status")
    op.execute("DROP TYPE IF EXISTS publish_status")
    
    # Rename temporary types back to original names
    op.execute("ALTER TYPE story_status_old RENAME TO story_status")
    op.execute("ALTER TYPE publish_status_old RENAME TO publish_status")
    
    # Rename temporary types back to original names
    op.execute("ALTER TYPE story_status_old RENAME TO story_status")
    op.execute("ALTER TYPE publish_status_old RENAME TO publish_status")
    # ### end Alembic commands ###
