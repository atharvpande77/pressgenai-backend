"""gsnrjlbnsbsnons

Revision ID: 6eaccedb916f
Revises: 59ca53cbfa6d
Create Date: 2025-09-09 11:46:34.410553

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6eaccedb916f'
down_revision: Union[str, Sequence[str], None] = '59ca53cbfa6d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    question_type_enum = postgresql.ENUM("what", "who", "where", "why", "when", "how", "sources", name="question_type")
    question_type_enum.create(op.get_bind())

    op.add_column('user_stories', sa.Column('word_length_range', sa.String(length=50), nullable=True))
    op.alter_column('user_stories', 'word_length',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=20),
               existing_nullable=True)
    op.alter_column('user_stories', 'publish_status',
               existing_type=postgresql.ENUM('draft', 'generated', 'published', name='publish_status'),
               nullable=True)
    op.add_column('user_stories_questions', sa.Column('question_type', postgresql.ENUM('what', 'who', 'where', 'why', 'when', 'how', 'sources', name='question_type'), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('user_stories_questions', 'question_type')
    op.alter_column('user_stories', 'publish_status',
               existing_type=postgresql.ENUM('draft', 'generated', 'published', name='publish_status'),
               nullable=False)
    op.alter_column('user_stories', 'word_length',
               existing_type=sa.String(length=20),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.drop_column('user_stories', 'word_length_range')

    question_type_enum = postgresql.ENUM("what", "who", "where", "why", "when", "how", "sources", name="question_type")
    question_type_enum.create(op.get_bind())
    # ### end Alembic commands ###
