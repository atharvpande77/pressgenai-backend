"""added relationships across authors, user_stories and generated_stories

Revision ID: 599e953a5851
Revises: ee961c65bbd2
Create Date: 2025-09-22 13:59:51.145222

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '599e953a5851'
down_revision: Union[str, Sequence[str], None] = 'ee961c65bbd2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Authors table changes
    op.create_unique_constraint(None, 'authors', ['password'])
    op.drop_column('authors', 'phone_number')
    
    # Step 1: Add author_id columns as NULLABLE first
    op.add_column('generated_user_stories', sa.Column('author_id', sa.UUID(), nullable=True))
    op.add_column('user_stories', sa.Column('author_id', sa.UUID(), nullable=True))
    
    # Step 2: Populate author_id with default values for existing records
    conn = op.get_bind()
    
    # Check if any authors exist, create one if none exist
    result = conn.execute(sa.text("SELECT COUNT(*) FROM authors")).fetchone()
    if result[0] == 0:
        # Create a default author if no authors exist
        conn.execute(sa.text("""
            INSERT INTO authors (id, first_name, email, password, bio)
            VALUES (uuid_generate_v4(), 'Default', 'default@example.com', '$2b$12$defaulthashedpassword', 'Default author for migration')
        """))
    
    # Get the first author's ID to use as default
    first_author = conn.execute(sa.text("SELECT id FROM authors LIMIT 1")).fetchone()
    if first_author:
        default_author_id = first_author[0]
        
        # Update existing records to have the default author_id
        conn.execute(sa.text("""
            UPDATE user_stories 
            SET author_id = :author_id 
            WHERE author_id IS NULL
        """), {"author_id": default_author_id})
        
        conn.execute(sa.text("""
            UPDATE generated_user_stories 
            SET author_id = :author_id 
            WHERE author_id IS NULL
        """), {"author_id": default_author_id})
    
    # Step 3: Now make the columns NOT NULL
    op.alter_column('generated_user_stories', 'author_id', nullable=False)
    op.alter_column('user_stories', 'author_id', nullable=False)
    
    # Step 4: Add foreign key constraints
    op.create_foreign_key(None, 'generated_user_stories', 'authors', ['author_id'], ['id'])
    op.create_foreign_key(None, 'user_stories', 'authors', ['author_id'], ['id'])
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'user_stories', type_='foreignkey')
    op.drop_column('user_stories', 'author_id')
    op.drop_constraint(None, 'generated_user_stories', type_='foreignkey')
    op.drop_column('generated_user_stories', 'author_id')
    op.add_column('authors', sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'authors', type_='unique')
    # ### end Alembic commands ###
